{"ast":null,"code":"var _jsxFileName = \"C:\\\\git\\\\TODO\\\\frontend\\\\src\\\\components\\\\TodoList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { getTodos, addTodo, updateTodo, deleteTodo } from '../services/api';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport { reorderTodos } from '../services/api';\n\n// Helper to normalize a todo object\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst normalizeTodo = todo => {\n  var _todo$name, _todo$isComplete;\n  return {\n    ...todo,\n    name: (_todo$name = todo.name) !== null && _todo$name !== void 0 ? _todo$name : todo.title,\n    isComplete: (_todo$isComplete = todo.isComplete) !== null && _todo$isComplete !== void 0 ? _todo$isComplete : todo.iscompleted,\n    completedAt: todo.completedAt // may be undefined\n  };\n};\nconst normalizeTodos = todos => todos.map(normalizeTodo);\nconst TodoList = () => {\n  _s();\n  const [todos, setTodos] = useState([]);\n  const [newTodo, setNewTodo] = useState('');\n  useEffect(() => {\n    const loadTodos = async () => {\n      const fetchedTodos = await getTodos();\n      setTodos(normalizeTodos(fetchedTodos));\n    };\n    loadTodos();\n  }, []);\n\n  // Split todos into groups\n  const unchecked = todos.filter(t => !t.isComplete);\n  const checked = todos.filter(t => t.isComplete).sort((a, b) => (b.completedAt || 0) - (a.completedAt || 0));\n  const handleAddTodo = async () => {\n    if (newTodo.trim()) {\n      const addedTodo = await addTodo({\n        name: newTodo,\n        isComplete: false\n      });\n      setTodos([...todos, normalizeTodo(addedTodo)]);\n      setNewTodo('');\n    }\n  };\n  const handleUpdateTodo = async (id, updatedFields) => {\n    const todoToUpdate = todos.find(t => t.id === id);\n    if (!todoToUpdate) return;\n    let updatedTodo = {\n      ...todoToUpdate,\n      ...updatedFields\n    };\n\n    // If marking as complete, add a timestamp\n    if (updatedFields.isComplete && !todoToUpdate.isComplete) {\n      updatedTodo.completedAt = Date.now();\n    }\n    // If marking as incomplete, remove the timestamp\n    if (!updatedFields.isComplete && todoToUpdate.isComplete) {\n      updatedTodo.completedAt = undefined;\n    }\n    const result = await updateTodo(id, updatedTodo);\n\n    // Always normalize the result\n    const normalizedResult = normalizeTodo(result);\n    setTodos(todos.map(t => t.id === id ? normalizedResult : t));\n  };\n  const handleDeleteTodo = async id => {\n    await deleteTodo(id);\n    setTodos(todos.filter(todo => todo.id !== id));\n  };\n\n  // Drag and drop handler\n  const onDragEnd = async result => {\n    if (!result.destination) return;\n    const {\n      source,\n      destination\n    } = result;\n    if (source.droppableId !== destination.droppableId) return;\n\n    // Split todos into groups\n    const unchecked = todos.filter(t => !t.isComplete);\n    const checked = todos.filter(t => t.isComplete);\n    let groupTodos, otherTodos, groupName;\n    if (source.droppableId === 'unchecked') {\n      groupTodos = Array.from(unchecked);\n      otherTodos = checked;\n      groupName = 'unchecked';\n    } else {\n      groupTodos = Array.from(checked);\n      otherTodos = unchecked;\n      groupName = 'checked';\n    }\n\n    // Reorder within the group\n    const [removed] = groupTodos.splice(source.index, 1);\n    groupTodos.splice(destination.index, 0, removed);\n\n    // Merge back into the main todos array\n    let newTodos;\n    if (groupName === 'unchecked') {\n      newTodos = [...groupTodos, ...otherTodos];\n    } else {\n      newTodos = [...otherTodos, ...groupTodos];\n    }\n    setTodos(newTodos);\n\n    // Prepare order payload for both groups\n    const orderList = [...groupTodos.map((todo, idx) => ({\n      id: todo.id,\n      orderNum: idx\n    })), ...otherTodos.map((todo, idx) => ({\n      id: todo.id,\n      orderNum: idx\n    }))];\n\n    // Persist order to backend\n    await reorderTodos(orderList);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-row\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: newTodo,\n        onChange: e => setNewTodo(e.target.value),\n        placeholder: \"Add a new todo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }, this), newTodo.trim() && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"add-todo-button\",\n        onClick: handleAddTodo,\n        \"aria-label\": \"Add\",\n        title: \"Add\",\n        children: \"\\u2795\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(DragDropContext, {\n      onDragEnd: onDragEnd,\n      children: [/*#__PURE__*/_jsxDEV(Droppable, {\n        droppableId: \"unchecked\",\n        children: provided => /*#__PURE__*/_jsxDEV(\"ul\", {\n          ref: provided.innerRef,\n          ...provided.droppableProps,\n          children: [unchecked.map((todo, idx) => /*#__PURE__*/_jsxDEV(Draggable, {\n            draggableId: `unchecked-${todo.id}`,\n            index: idx,\n            children: provided => /*#__PURE__*/_jsxDEV(\"li\", {\n              className: \"todo-list-item\",\n              ref: provided.innerRef,\n              ...provided.draggableProps,\n              ...provided.dragHandleProps,\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                checked: todo.isComplete,\n                onChange: () => handleUpdateTodo(todo.id, {\n                  isComplete: !todo.isComplete\n                }),\n                \"aria-label\": todo.isComplete ? 'Mark as incomplete' : 'Mark as complete',\n                style: {\n                  marginRight: '8px'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 154,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"todo-item-text\",\n                style: {\n                  textDecoration: todo.isComplete ? 'line-through' : 'none'\n                },\n                children: todo.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 161,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"todo-item-button\",\n                onClick: () => handleDeleteTodo(todo.id),\n                \"aria-label\": \"Delete\",\n                title: \"Delete\",\n                children: \"\\uD83D\\uDDD1\\uFE0F\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 167,\n                columnNumber: 45\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 148,\n              columnNumber: 41\n            }, this)\n          }, todo.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 33\n          }, this)), provided.placeholder]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Droppable, {\n        droppableId: \"checked\",\n        children: provided => /*#__PURE__*/_jsxDEV(\"ul\", {\n          ref: provided.innerRef,\n          ...provided.droppableProps,\n          children: [checked.map((todo, idx) => /*#__PURE__*/_jsxDEV(Draggable, {\n            draggableId: `checked-${todo.id}`,\n            index: idx,\n            children: provided => /*#__PURE__*/_jsxDEV(\"li\", {\n              className: \"todo-list-item\",\n              ref: provided.innerRef,\n              ...provided.draggableProps,\n              ...provided.dragHandleProps,\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                checked: todo.isComplete,\n                onChange: () => handleUpdateTodo(todo.id, {\n                  isComplete: !todo.isComplete\n                }),\n                \"aria-label\": todo.isComplete ? 'Mark as incomplete' : 'Mark as complete',\n                style: {\n                  marginRight: '8px'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 198,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"todo-item-text\",\n                style: {\n                  textDecoration: todo.isComplete ? 'line-through' : 'none'\n                },\n                children: todo.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 205,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"todo-item-button\",\n                onClick: () => handleDeleteTodo(todo.id),\n                \"aria-label\": \"Delete\",\n                title: \"Delete\",\n                children: \"\\uD83D\\uDDD1\\uFE0F\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 211,\n                columnNumber: 45\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 192,\n              columnNumber: 41\n            }, this)\n          }, todo.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 33\n          }, this)), provided.placeholder]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 9\n  }, this);\n};\n_s(TodoList, \"5IWrR3qlB9fd4Xrb4YgyFMm9peE=\");\n_c = TodoList;\nexport default TodoList;\nvar _c;\n$RefreshReg$(_c, \"TodoList\");","map":{"version":3,"names":["React","useState","useEffect","getTodos","addTodo","updateTodo","deleteTodo","DragDropContext","Droppable","Draggable","reorderTodos","jsxDEV","_jsxDEV","normalizeTodo","todo","_todo$name","_todo$isComplete","name","title","isComplete","iscompleted","completedAt","normalizeTodos","todos","map","TodoList","_s","setTodos","newTodo","setNewTodo","loadTodos","fetchedTodos","unchecked","filter","t","checked","sort","a","b","handleAddTodo","trim","addedTodo","handleUpdateTodo","id","updatedFields","todoToUpdate","find","updatedTodo","Date","now","undefined","result","normalizedResult","handleDeleteTodo","onDragEnd","destination","source","droppableId","groupTodos","otherTodos","groupName","Array","from","removed","splice","index","newTodos","orderList","idx","orderNum","children","className","type","value","onChange","e","target","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","onClick","provided","ref","innerRef","droppableProps","draggableId","draggableProps","dragHandleProps","style","marginRight","textDecoration","_c","$RefreshReg$"],"sources":["C:/git/TODO/frontend/src/components/TodoList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { getTodos, addTodo, updateTodo, deleteTodo } from '../services/api';\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\nimport { reorderTodos } from '../services/api';\r\n\r\n// Helper to normalize a todo object\r\nconst normalizeTodo = (todo) => ({\r\n    ...todo,\r\n    name: todo.name ?? todo.title,\r\n    isComplete: todo.isComplete ?? todo.iscompleted,\r\n    completedAt: todo.completedAt // may be undefined\r\n});\r\n\r\nconst normalizeTodos = (todos) => todos.map(normalizeTodo);\r\n\r\nconst TodoList = () => {\r\n    const [todos, setTodos] = useState([]);\r\n    const [newTodo, setNewTodo] = useState('');\r\n\r\n    useEffect(() => {\r\n        const loadTodos = async () => {\r\n            const fetchedTodos = await getTodos();\r\n            setTodos(normalizeTodos(fetchedTodos));\r\n        };\r\n        loadTodos();\r\n    }, []);\r\n\r\n    // Split todos into groups\r\n    const unchecked = todos.filter(t => !t.isComplete);\r\n    const checked = todos\r\n        .filter(t => t.isComplete)\r\n        .sort((a, b) => (b.completedAt || 0) - (a.completedAt || 0));\r\n\r\n    const handleAddTodo = async () => {\r\n        if (newTodo.trim()) {\r\n            const addedTodo = await addTodo({ name: newTodo, isComplete: false });\r\n            setTodos([...todos, normalizeTodo(addedTodo)]);\r\n            setNewTodo('');\r\n        }\r\n    };\r\n\r\n    const handleUpdateTodo = async (id, updatedFields) => {\r\n        const todoToUpdate = todos.find(t => t.id === id);\r\n        if (!todoToUpdate) return;\r\n\r\n        let updatedTodo = {\r\n            ...todoToUpdate,\r\n            ...updatedFields\r\n        };\r\n\r\n        // If marking as complete, add a timestamp\r\n        if (updatedFields.isComplete && !todoToUpdate.isComplete) {\r\n            updatedTodo.completedAt = Date.now();\r\n        }\r\n        // If marking as incomplete, remove the timestamp\r\n        if (!updatedFields.isComplete && todoToUpdate.isComplete) {\r\n            updatedTodo.completedAt = undefined;\r\n        }\r\n\r\n        const result = await updateTodo(id, updatedTodo);\r\n\r\n        // Always normalize the result\r\n        const normalizedResult = normalizeTodo(result);\r\n\r\n        setTodos(todos.map(t => t.id === id ? normalizedResult : t));\r\n    };\r\n\r\n    const handleDeleteTodo = async (id) => {\r\n        await deleteTodo(id);\r\n        setTodos(todos.filter(todo => todo.id !== id));\r\n    };\r\n\r\n    // Drag and drop handler\r\n    const onDragEnd = async (result) => {\r\n        if (!result.destination) return;\r\n\r\n        const { source, destination } = result;\r\n        if (source.droppableId !== destination.droppableId) return;\r\n\r\n        // Split todos into groups\r\n        const unchecked = todos.filter(t => !t.isComplete);\r\n        const checked = todos.filter(t => t.isComplete);\r\n\r\n        let groupTodos, otherTodos, groupName;\r\n        if (source.droppableId === 'unchecked') {\r\n            groupTodos = Array.from(unchecked);\r\n            otherTodos = checked;\r\n            groupName = 'unchecked';\r\n        } else {\r\n            groupTodos = Array.from(checked);\r\n            otherTodos = unchecked;\r\n            groupName = 'checked';\r\n        }\r\n\r\n        // Reorder within the group\r\n        const [removed] = groupTodos.splice(source.index, 1);\r\n        groupTodos.splice(destination.index, 0, removed);\r\n\r\n        // Merge back into the main todos array\r\n        let newTodos;\r\n        if (groupName === 'unchecked') {\r\n            newTodos = [...groupTodos, ...otherTodos];\r\n        } else {\r\n            newTodos = [...otherTodos, ...groupTodos];\r\n        }\r\n        setTodos(newTodos);\r\n\r\n        // Prepare order payload for both groups\r\n        const orderList = [\r\n            ...groupTodos.map((todo, idx) => ({ id: todo.id, orderNum: idx })),\r\n            ...otherTodos.map((todo, idx) => ({ id: todo.id, orderNum: idx }))\r\n        ];\r\n\r\n        // Persist order to backend\r\n        await reorderTodos(orderList);\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"input-row\">\r\n                <input\r\n                    type=\"text\"\r\n                    value={newTodo}\r\n                    onChange={(e) => setNewTodo(e.target.value)}\r\n                    placeholder=\"Add a new todo\"\r\n                />\r\n                {newTodo.trim() && (\r\n                    <button\r\n                        className=\"add-todo-button\"\r\n                        onClick={handleAddTodo}\r\n                        aria-label=\"Add\"\r\n                        title=\"Add\"\r\n                    >\r\n                        ➕\r\n                    </button>\r\n                )}\r\n            </div>\r\n            <DragDropContext onDragEnd={onDragEnd}>\r\n                <Droppable droppableId=\"unchecked\">\r\n                    {(provided) => (\r\n                        <ul\r\n                            ref={provided.innerRef}\r\n                            {...provided.droppableProps}\r\n                        >\r\n                            {unchecked.map((todo, idx) => (\r\n                                <Draggable key={todo.id} draggableId={`unchecked-${todo.id}`} index={idx}>\r\n                                    {(provided) => (\r\n                                        <li\r\n                                            className=\"todo-list-item\"\r\n                                            ref={provided.innerRef}\r\n                                            {...provided.draggableProps}\r\n                                            {...provided.dragHandleProps}\r\n                                        >\r\n                                            <input\r\n                                                type=\"checkbox\"\r\n                                                checked={todo.isComplete}\r\n                                                onChange={() => handleUpdateTodo(todo.id, { isComplete: !todo.isComplete })}\r\n                                                aria-label={todo.isComplete ? 'Mark as incomplete' : 'Mark as complete'}\r\n                                                style={{ marginRight: '8px' }}\r\n                                            />\r\n                                            <span\r\n                                                className=\"todo-item-text\"\r\n                                                style={{ textDecoration: todo.isComplete ? 'line-through' : 'none' }}\r\n                                            >\r\n                                                {todo.name}\r\n                                            </span>\r\n                                            <button\r\n                                                className=\"todo-item-button\"\r\n                                                onClick={() => handleDeleteTodo(todo.id)}\r\n                                                aria-label=\"Delete\"\r\n                                                title=\"Delete\"\r\n                                            >\r\n                                                🗑️\r\n                                            </button>\r\n                                        </li>\r\n                                    )}\r\n                                </Draggable>\r\n                            ))}\r\n                            {provided.placeholder}\r\n                        </ul>\r\n                    )}\r\n                </Droppable>\r\n                <Droppable droppableId=\"checked\">\r\n                    {(provided) => (\r\n                        <ul\r\n                            ref={provided.innerRef}\r\n                            {...provided.droppableProps}\r\n                        >\r\n                            {checked.map((todo, idx) => (\r\n                                <Draggable key={todo.id} draggableId={`checked-${todo.id}`} index={idx}>\r\n                                    {(provided) => (\r\n                                        <li\r\n                                            className=\"todo-list-item\"\r\n                                            ref={provided.innerRef}\r\n                                            {...provided.draggableProps}\r\n                                            {...provided.dragHandleProps}\r\n                                        >\r\n                                            <input\r\n                                                type=\"checkbox\"\r\n                                                checked={todo.isComplete}\r\n                                                onChange={() => handleUpdateTodo(todo.id, { isComplete: !todo.isComplete })}\r\n                                                aria-label={todo.isComplete ? 'Mark as incomplete' : 'Mark as complete'}\r\n                                                style={{ marginRight: '8px' }}\r\n                                            />\r\n                                            <span\r\n                                                className=\"todo-item-text\"\r\n                                                style={{ textDecoration: todo.isComplete ? 'line-through' : 'none' }}\r\n                                            >\r\n                                                {todo.name}\r\n                                            </span>\r\n                                            <button\r\n                                                className=\"todo-item-button\"\r\n                                                onClick={() => handleDeleteTodo(todo.id)}\r\n                                                aria-label=\"Delete\"\r\n                                                title=\"Delete\"\r\n                                            >\r\n                                                🗑️\r\n                                            </button>\r\n                                        </li>\r\n                                    )}\r\n                                </Draggable>\r\n                            ))}\r\n                            {provided.placeholder}\r\n                        </ul>\r\n                    )}\r\n                </Droppable>\r\n            </DragDropContext>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TodoList;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}