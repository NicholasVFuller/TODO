{"ast":null,"code":"var _jsxFileName = \"C:\\\\git\\\\TODO\\\\frontend\\\\src\\\\components\\\\TodoList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { getTodos, addTodo, updateTodo, deleteTodo, reorderTodos } from '../services/api';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst normalizeTodo = todo => {\n  var _todo$name, _todo$isComplete;\n  return {\n    ...todo,\n    name: (_todo$name = todo.name) !== null && _todo$name !== void 0 ? _todo$name : todo.title,\n    isComplete: (_todo$isComplete = todo.isComplete) !== null && _todo$isComplete !== void 0 ? _todo$isComplete : todo.iscomplete,\n    completedAt: todo.completedAt\n  };\n};\nconst normalizeTodos = todos => todos.map(normalizeTodo);\nconst TodoList = () => {\n  _s();\n  const [todos, setTodos] = useState([]);\n  const [newTodo, setNewTodo] = useState('');\n  useEffect(() => {\n    const loadTodos = async () => {\n      const fetchedTodos = await getTodos();\n      setTodos(normalizeTodos(fetchedTodos));\n    };\n    loadTodos();\n  }, []);\n  const persistOrder = async orderedTodos => {\n    // Always persist the full grouped order\n    const unchecked = orderedTodos.filter(t => !t.isComplete);\n    const checked = orderedTodos.filter(t => t.isComplete);\n    const newTodos = [...unchecked, ...checked];\n    await reorderTodos(newTodos);\n  };\n  const handleAddTodo = async () => {\n    if (newTodo.trim()) {\n      const addedTodo = await addTodo({\n        name: newTodo,\n        isComplete: false\n      });\n      const updatedTodos = [...todos, normalizeTodo(addedTodo)];\n      setTodos(updatedTodos);\n      await persistOrder(updatedTodos);\n      setNewTodo('');\n    }\n  };\n  const handleUpdateTodo = async (id, updatedFields) => {\n    const todoToUpdate = todos.find(t => t.id === id);\n    if (!todoToUpdate) return;\n    let updatedTodo = {\n      ...todoToUpdate,\n      ...updatedFields\n    };\n    if (updatedFields.isComplete && !todoToUpdate.isComplete) {\n      updatedTodo.completedAt = Date.now();\n    }\n    if (!updatedFields.isComplete && todoToUpdate.isComplete) {\n      updatedTodo.completedAt = undefined;\n    }\n    const result = await updateTodo(id, updatedTodo);\n    const normalizedResult = normalizeTodo(result);\n\n    // Remove the updated todo from the list\n    let otherTodos = todos.filter(t => t.id !== id);\n\n    // Always preserve the order of the other checked items\n    let unchecked = otherTodos.filter(t => !t.isComplete);\n    let checked = otherTodos.filter(t => t.isComplete);\n    if (normalizedResult.isComplete) {\n      // Move to end of checked group\n      checked = [...checked, normalizedResult];\n    } else {\n      // Move to end of unchecked group\n      unchecked = [...unchecked, normalizedResult];\n    }\n    const updatedTodos = [...unchecked, ...checked];\n    setTodos(updatedTodos);\n    await persistOrder(updatedTodos);\n  };\n  const handleDeleteTodo = async id => {\n    const updatedTodos = todos.filter(todo => todo.id !== id);\n    setTodos(updatedTodos);\n    await deleteTodo(id);\n    await persistOrder(updatedTodos);\n  };\n  const onDragEnd = async result => {\n    if (!result.destination) return;\n    const {\n      source,\n      destination\n    } = result;\n    if (source.droppableId !== destination.droppableId) return;\n\n    // Split todos into groups\n    const unchecked = todos.filter(t => !t.isComplete);\n    const checked = todos.filter(t => t.isComplete);\n    let groupTodos, otherTodos, groupName;\n    if (source.droppableId === 'unchecked') {\n      groupTodos = Array.from(unchecked);\n      otherTodos = checked;\n      groupName = 'unchecked';\n    } else {\n      groupTodos = Array.from(checked);\n      otherTodos = unchecked;\n      groupName = 'checked';\n    }\n\n    // Reorder within the group\n    const [removed] = groupTodos.splice(source.index, 1);\n    groupTodos.splice(destination.index, 0, removed);\n\n    // Merge back into the main todos array in grouped order\n    let newTodos;\n    if (groupName === 'unchecked') {\n      newTodos = [...groupTodos, ...otherTodos];\n    } else {\n      newTodos = [...otherTodos, ...groupTodos];\n    }\n    setTodos(newTodos);\n    await reorderTodos(newTodos); // always use newTodos, not todos\n  };\n\n  // Split todos for rendering\n  const unchecked = todos.filter(t => !t.isComplete);\n  const checked = todos.filter(t => t.isComplete);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-row\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: newTodo,\n        onChange: e => setNewTodo(e.target.value),\n        placeholder: \"Add a new todo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 17\n      }, this), newTodo.trim() && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"add-todo-button\",\n        onClick: handleAddTodo,\n        \"aria-label\": \"Add\",\n        title: \"Add\",\n        children: \"\\u2795\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(DragDropContext, {\n      onDragEnd: onDragEnd,\n      children: [/*#__PURE__*/_jsxDEV(Droppable, {\n        droppableId: \"unchecked\",\n        children: provided => /*#__PURE__*/_jsxDEV(\"ul\", {\n          ref: provided.innerRef,\n          ...provided.droppableProps,\n          children: [unchecked.map((todo, idx) => /*#__PURE__*/_jsxDEV(Draggable, {\n            draggableId: `unchecked-${todo.id}`,\n            index: idx,\n            children: provided => /*#__PURE__*/_jsxDEV(\"li\", {\n              className: \"todo-list-item\",\n              ref: provided.innerRef,\n              ...provided.draggableProps,\n              ...provided.dragHandleProps,\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                checked: todo.isComplete,\n                onChange: () => handleUpdateTodo(todo.id, {\n                  isComplete: !todo.isComplete\n                }),\n                \"aria-label\": todo.isComplete ? 'Mark as incomplete' : 'Mark as complete',\n                style: {\n                  marginRight: '8px'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 166,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"todo-item-text\",\n                style: {\n                  textDecoration: todo.isComplete ? 'line-through' : 'none'\n                },\n                children: todo.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 173,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"todo-item-button\",\n                onClick: () => handleDeleteTodo(todo.id),\n                \"aria-label\": \"Delete\",\n                title: \"Delete\",\n                children: \"\\uD83D\\uDDD1\\uFE0F\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 179,\n                columnNumber: 45\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 41\n            }, this)\n          }, todo.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 33\n          }, this)), provided.placeholder]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Droppable, {\n        droppableId: \"checked\",\n        children: provided => /*#__PURE__*/_jsxDEV(\"ul\", {\n          ref: provided.innerRef,\n          ...provided.droppableProps,\n          children: [checked.map((todo, idx) => /*#__PURE__*/_jsxDEV(Draggable, {\n            draggableId: `checked-${todo.id}`,\n            index: idx,\n            children: provided => /*#__PURE__*/_jsxDEV(\"li\", {\n              className: \"todo-list-item\",\n              ref: provided.innerRef,\n              ...provided.draggableProps,\n              ...provided.dragHandleProps,\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\",\n                checked: todo.isComplete,\n                onChange: () => handleUpdateTodo(todo.id, {\n                  isComplete: !todo.isComplete\n                }),\n                \"aria-label\": todo.isComplete ? 'Mark as incomplete' : 'Mark as complete',\n                style: {\n                  marginRight: '8px'\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 210,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"todo-item-text\",\n                style: {\n                  textDecoration: todo.isComplete ? 'line-through' : 'none'\n                },\n                children: todo.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 217,\n                columnNumber: 45\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"todo-item-button\",\n                onClick: () => handleDeleteTodo(todo.id),\n                \"aria-label\": \"Delete\",\n                title: \"Delete\",\n                children: \"\\uD83D\\uDDD1\\uFE0F\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 223,\n                columnNumber: 45\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 204,\n              columnNumber: 41\n            }, this)\n          }, todo.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 33\n          }, this)), provided.placeholder]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 9\n  }, this);\n};\n_s(TodoList, \"5IWrR3qlB9fd4Xrb4YgyFMm9peE=\");\n_c = TodoList;\nexport default TodoList;\nvar _c;\n$RefreshReg$(_c, \"TodoList\");","map":{"version":3,"names":["React","useState","useEffect","getTodos","addTodo","updateTodo","deleteTodo","reorderTodos","DragDropContext","Droppable","Draggable","jsxDEV","_jsxDEV","normalizeTodo","todo","_todo$name","_todo$isComplete","name","title","isComplete","iscomplete","completedAt","normalizeTodos","todos","map","TodoList","_s","setTodos","newTodo","setNewTodo","loadTodos","fetchedTodos","persistOrder","orderedTodos","unchecked","filter","t","checked","newTodos","handleAddTodo","trim","addedTodo","updatedTodos","handleUpdateTodo","id","updatedFields","todoToUpdate","find","updatedTodo","Date","now","undefined","result","normalizedResult","otherTodos","handleDeleteTodo","onDragEnd","destination","source","droppableId","groupTodos","groupName","Array","from","removed","splice","index","children","className","type","value","onChange","e","target","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","onClick","provided","ref","innerRef","droppableProps","idx","draggableId","draggableProps","dragHandleProps","style","marginRight","textDecoration","_c","$RefreshReg$"],"sources":["C:/git/TODO/frontend/src/components/TodoList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { getTodos, addTodo, updateTodo, deleteTodo, reorderTodos } from '../services/api';\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\n\r\nconst normalizeTodo = (todo) => ({\r\n    ...todo,\r\n    name: todo.name ?? todo.title,\r\n    isComplete: todo.isComplete ?? todo.iscomplete,\r\n    completedAt: todo.completedAt\r\n});\r\n\r\nconst normalizeTodos = (todos) => todos.map(normalizeTodo);\r\n\r\nconst TodoList = () => {\r\n    const [todos, setTodos] = useState([]);\r\n    const [newTodo, setNewTodo] = useState('');\r\n\r\n    useEffect(() => {\r\n        const loadTodos = async () => {\r\n            const fetchedTodos = await getTodos();\r\n            setTodos(normalizeTodos(fetchedTodos));\r\n        };\r\n        loadTodos();\r\n    }, []);\r\n\r\n    const persistOrder = async (orderedTodos) => {\r\n        // Always persist the full grouped order\r\n        const unchecked = orderedTodos.filter(t => !t.isComplete);\r\n        const checked = orderedTodos.filter(t => t.isComplete);\r\n        const newTodos = [...unchecked, ...checked];\r\n        await reorderTodos(newTodos);\r\n    };\r\n\r\n    const handleAddTodo = async () => {\r\n        if (newTodo.trim()) {\r\n            const addedTodo = await addTodo({ name: newTodo, isComplete: false });\r\n            const updatedTodos = [...todos, normalizeTodo(addedTodo)];\r\n            setTodos(updatedTodos);\r\n            await persistOrder(updatedTodos);\r\n            setNewTodo('');\r\n        }\r\n    };\r\n\r\n    const handleUpdateTodo = async (id, updatedFields) => {\r\n        const todoToUpdate = todos.find(t => t.id === id);\r\n        if (!todoToUpdate) return;\r\n\r\n        let updatedTodo = {\r\n            ...todoToUpdate,\r\n            ...updatedFields\r\n        };\r\n\r\n        if (updatedFields.isComplete && !todoToUpdate.isComplete) {\r\n            updatedTodo.completedAt = Date.now();\r\n        }\r\n        if (!updatedFields.isComplete && todoToUpdate.isComplete) {\r\n            updatedTodo.completedAt = undefined;\r\n        }\r\n\r\n        const result = await updateTodo(id, updatedTodo);\r\n        const normalizedResult = normalizeTodo(result);\r\n\r\n        // Remove the updated todo from the list\r\n        let otherTodos = todos.filter(t => t.id !== id);\r\n\r\n        // Always preserve the order of the other checked items\r\n        let unchecked = otherTodos.filter(t => !t.isComplete);\r\n        let checked = otherTodos.filter(t => t.isComplete);\r\n\r\n        if (normalizedResult.isComplete) {\r\n            // Move to end of checked group\r\n            checked = [...checked, normalizedResult];\r\n        } else {\r\n            // Move to end of unchecked group\r\n            unchecked = [...unchecked, normalizedResult];\r\n        }\r\n\r\n        const updatedTodos = [...unchecked, ...checked];\r\n        setTodos(updatedTodos);\r\n        await persistOrder(updatedTodos);\r\n    };\r\n\r\n    const handleDeleteTodo = async (id) => {\r\n        const updatedTodos = todos.filter(todo => todo.id !== id);\r\n        setTodos(updatedTodos);\r\n        await deleteTodo(id);\r\n        await persistOrder(updatedTodos);\r\n    };\r\n\r\n    const onDragEnd = async (result) => {\r\n        if (!result.destination) return;\r\n\r\n        const { source, destination } = result;\r\n        if (source.droppableId !== destination.droppableId) return;\r\n\r\n        // Split todos into groups\r\n        const unchecked = todos.filter(t => !t.isComplete);\r\n        const checked = todos.filter(t => t.isComplete);\r\n\r\n        let groupTodos, otherTodos, groupName;\r\n        if (source.droppableId === 'unchecked') {\r\n            groupTodos = Array.from(unchecked);\r\n            otherTodos = checked;\r\n            groupName = 'unchecked';\r\n        } else {\r\n            groupTodos = Array.from(checked);\r\n            otherTodos = unchecked;\r\n            groupName = 'checked';\r\n        }\r\n\r\n        // Reorder within the group\r\n        const [removed] = groupTodos.splice(source.index, 1);\r\n        groupTodos.splice(destination.index, 0, removed);\r\n\r\n        // Merge back into the main todos array in grouped order\r\n        let newTodos;\r\n        if (groupName === 'unchecked') {\r\n            newTodos = [...groupTodos, ...otherTodos];\r\n        } else {\r\n            newTodos = [...otherTodos, ...groupTodos];\r\n        }\r\n        setTodos(newTodos);\r\n        await reorderTodos(newTodos); // always use newTodos, not todos\r\n    };\r\n\r\n    // Split todos for rendering\r\n    const unchecked = todos.filter(t => !t.isComplete);\r\n    const checked = todos.filter(t => t.isComplete);\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"input-row\">\r\n                <input\r\n                    type=\"text\"\r\n                    value={newTodo}\r\n                    onChange={(e) => setNewTodo(e.target.value)}\r\n                    placeholder=\"Add a new todo\"\r\n                />\r\n                {newTodo.trim() && (\r\n                    <button\r\n                        className=\"add-todo-button\"\r\n                        onClick={handleAddTodo}\r\n                        aria-label=\"Add\"\r\n                        title=\"Add\"\r\n                    >\r\n                        ➕\r\n                    </button>\r\n                )}\r\n            </div>\r\n            <DragDropContext onDragEnd={onDragEnd}>\r\n                <Droppable droppableId=\"unchecked\">\r\n                    {(provided) => (\r\n                        <ul\r\n                            ref={provided.innerRef}\r\n                            {...provided.droppableProps}\r\n                        >\r\n                            {unchecked.map((todo, idx) => (\r\n                                <Draggable key={todo.id} draggableId={`unchecked-${todo.id}`} index={idx}>\r\n                                    {(provided) => (\r\n                                        <li\r\n                                            className=\"todo-list-item\"\r\n                                            ref={provided.innerRef}\r\n                                            {...provided.draggableProps}\r\n                                            {...provided.dragHandleProps}\r\n                                        >\r\n                                            <input\r\n                                                type=\"checkbox\"\r\n                                                checked={todo.isComplete}\r\n                                                onChange={() => handleUpdateTodo(todo.id, { isComplete: !todo.isComplete })}\r\n                                                aria-label={todo.isComplete ? 'Mark as incomplete' : 'Mark as complete'}\r\n                                                style={{ marginRight: '8px' }}\r\n                                            />\r\n                                            <span\r\n                                                className=\"todo-item-text\"\r\n                                                style={{ textDecoration: todo.isComplete ? 'line-through' : 'none' }}\r\n                                            >\r\n                                                {todo.name}\r\n                                            </span>\r\n                                            <button\r\n                                                className=\"todo-item-button\"\r\n                                                onClick={() => handleDeleteTodo(todo.id)}\r\n                                                aria-label=\"Delete\"\r\n                                                title=\"Delete\"\r\n                                            >\r\n                                                🗑️\r\n                                            </button>\r\n                                        </li>\r\n                                    )}\r\n                                </Draggable>\r\n                            ))}\r\n                            {provided.placeholder}\r\n                        </ul>\r\n                    )}\r\n                </Droppable>\r\n                <Droppable droppableId=\"checked\">\r\n                    {(provided) => (\r\n                        <ul\r\n                            ref={provided.innerRef}\r\n                            {...provided.droppableProps}\r\n                        >\r\n                            {checked.map((todo, idx) => (\r\n                                <Draggable key={todo.id} draggableId={`checked-${todo.id}`} index={idx}>\r\n                                    {(provided) => (\r\n                                        <li\r\n                                            className=\"todo-list-item\"\r\n                                            ref={provided.innerRef}\r\n                                            {...provided.draggableProps}\r\n                                            {...provided.dragHandleProps}\r\n                                        >\r\n                                            <input\r\n                                                type=\"checkbox\"\r\n                                                checked={todo.isComplete}\r\n                                                onChange={() => handleUpdateTodo(todo.id, { isComplete: !todo.isComplete })}\r\n                                                aria-label={todo.isComplete ? 'Mark as incomplete' : 'Mark as complete'}\r\n                                                style={{ marginRight: '8px' }}\r\n                                            />\r\n                                            <span\r\n                                                className=\"todo-item-text\"\r\n                                                style={{ textDecoration: todo.isComplete ? 'line-through' : 'none' }}\r\n                                            >\r\n                                                {todo.name}\r\n                                            </span>\r\n                                            <button\r\n                                                className=\"todo-item-button\"\r\n                                                onClick={() => handleDeleteTodo(todo.id)}\r\n                                                aria-label=\"Delete\"\r\n                                                title=\"Delete\"\r\n                                            >\r\n                                                🗑️\r\n                                            </button>\r\n                                        </li>\r\n                                    )}\r\n                                </Draggable>\r\n                            ))}\r\n                            {provided.placeholder}\r\n                        </ul>\r\n                    )}\r\n                </Droppable>\r\n            </DragDropContext>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TodoList;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}